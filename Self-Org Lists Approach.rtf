{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sl276\slmult1\qc\fs22\lang9 Preprogramming Approach\par
\par

\pard\sl276\slmult1 5/3/23:\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1 Review assignment instructions carefully\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Implement the three self-organizing list heuristics: count, move-to-front, and transpose\ul\par
{\pntext\f1\'B7\tab}\ulnone Keep track of compares to be able to track the cost of each heuristic\ul\par
{\pntext\f1\'B7\tab}\ulnone Use SelfOrderedListADT and the provided linked list files to implement the self-ordered lists (can use inheritance or composition)\ul\par
{\pntext\f1\'B7\tab}\ulnone Can make changes to any files EXCEPT SelfOrderedListADT and test.txt\ul\par
{\pntext\f1\'B7\tab}\ulnone This program will run two tests:\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li2160\sl276\slmult1\ulnone Char Types: uses the add() function to build an initial list from A to H. Create a second function to input the character list containing I. For each heuristic, display the order of the final list with the number of compares.\ul\par
{\pntext\f1\'B7\tab}\ulnone Second test uses the test.txt file using the data type string. Pull the test.txt into the program using the find() function to add words to the list, then print out the total number of words, compares, and the first 10 words in the list along with frequency. (THE EXAMPLE IS NOT THE EXACT EXPECTED OUTPUT)\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Submit plenty of screenshots\ul\par
{\pntext\f1\'B7\tab}\ulnone Implement the SelfOrderedListADT methods:\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li2160\sl276\slmult1\ulnone find() - finds a value in list and increments frequency variable, if value not found, then add() is called to put value at the end of the list. Both cases calls reorder() to order according to heuristic being used. find() increments the number of compares made, but add() does not.\ul\par
{\pntext\f1\'B7\tab}\ulnone add() - appends the value to the end of the list without doing any compares or adjusting frequencies.\ul\par
{\pntext\f1\'B7\tab}\ulnone getCompares() - returns the total number of compares done by find when searching for values in a list\ul\par
{\pntext\f1\'B7\tab}\ulnone size() - returns the size of the list\ul\par
{\pntext\f1\'B7\tab}\ulnone printList() prints the list following this syntax: value-## where value is the value of the node (char or string) and ## is the freq of that value.\ul\par
{\pntext\f1\'B7\tab}\ulnone printList(n) - separate method to allow for only 10 nodes to be printed \ul\par
{\pntext\f1\'B7\tab}\ulnone reorder() - can be called anywhere, but this is a method that reorders list based on heuristic being used (typically called by find())\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1\ulnone Review self-organizing lists in textbook:\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Organizes records by expected frequency of access.\ul\par
{\pntext\f1\'B7\tab}\ulnone Assumes that most frequently used record will be stored first.\ul\par
{\pntext\f1\'B7\tab}\ulnone 80/20 rule says 80% of access methods hit 20% of records stored.\ul\par
{\pntext\f1\'B7\tab}\ulnone Self Org Lists (SOLs) modify the order of records based on the actual pattern of record access\ul\par
{\pntext\f1\'B7\tab}\ulnone The most obvious approach is the Count heuristic, similar to LFU buffer method\ul\par
{\pntext\f1\'B7\tab}\ulnone Move to front heuristic is similar to LRU buffer method, and is easy with linked lists\ul\par
{\pntext\f1\'B7\tab}\ulnone Transpose heuristic swaps the record with the record preceding it with each access.\ul\par

\pard\sl276\slmult1\ulnone\par
5/5/23:\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1 Download code files and review.\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Preliminary thoughts - since there is no limits/requirements to how the lists are implemented, it might be best to use a different implementation for each list heuristic (Ex. Count inherits SelfOrderedListADT, Move-to-Front inherits SelfOrderedListADT, and Transpose inherits SelfOrderedListADT)\ul\par
{\pntext\f1\'B7\tab}\ulnone I\rquote m going to create a main.cpp, but I\rquote ll only use comments with it to keep track of what is needed, I will create the code for this file last.\ul\par

\pard\sl276\slmult1\ulnone\par
5/7/23:\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1 Started working on the count heuristic header file.\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Constructor sets the compares to zero, destructor implemented.\ul\par
{\pntext\f1\'B7\tab}\ulnone Completed the getCompares method\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li2160\sl276\slmult1\ulnone Did this so I could verify that the constructor does set this variable\ul\par
{\pntext\f1\'B7\tab}\ulnone Added a list object to data members for other methods to use\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Wrote the add() method and added code to fill the list\ul\par
{\pntext\f1\'B7\tab}\ulnone I finished both of the printlist methods.\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li2160\sl276\slmult1\ulnone Had to comment out printlist(n), was showing an error that said that printlist(n) did not take an argument, maybe this is because I haven\rquote t finished the mainDriver\rquote s call to the test.txt strings\ul\par
{\pntext\f1\'B7\tab}\ulnone Had some errors with the list object, made the following modifications to other files; 5/8/2023 added more methods\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li2880\sl276\slmult1 LList.h: wrote the implementation of the print method using objects from link class.\par
{\pntext\f1\'B7\tab}Put in get/set methods in LList to get the value of timesaccessed from the link class, added a get method to the list.h file, added the get/sets to link.h\ul\par
{\pntext\f1\'B7\tab}\ulnone Removed the assertion line from the remove method (planning to handle when curr->next is null within the find() method, and want to see if I can do that without this line)\ul\par
{\pntext\f1\'B7\tab}\ulnone Added methods to get the tail and front items in the list.\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li2160\sl276\slmult1\ulnone Same thing as above for print(n)\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1 getSize method done, started the find method.\ul\par

\pard\sl276\slmult1\ulnone\par
5/8/23:\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1 Finished the find method\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone May have to come back to this, I did not see any errors with it - 5/11/2023 - was not able to use add() method, values would be inserted but reorder was not working correctly\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li2160\sl276\slmult1\ulnone Used a bool flag called isFound to determine whether the value needed to be added or not\ul\par
{\pntext\f1\'B7\tab}\ulnone if/else statements conditioned on the bool flag, reorder commented out for now.\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Completed the reorder function\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li2160\sl276\slmult1\ulnone Compared neighboring elements to push highest accessed to front of list.\ul\par
{\pntext\f1\'B7\tab}\ulnone Uncommented reorder from find, so far so good\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1\ulnone Since the only real difference appears to be the reorder function for these methods, I will just copy/paste the files to new headers titled mtf.h and transpose.h and change names where appropriate.\ul\par
{\pntext\f1\'B7\tab}\ulnone Started mtf.h heuristic header\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Made changes to constructor, destructor.\ul\par
{\pntext\f1\'B7\tab}\ulnone Changed reorder function to push elements to front of list that were most recently accessed\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1\ulnone Added logic for mtf adds/finds to mainDriver.\ul\par
{\pntext\f1\'B7\tab}\ulnone Started transpose.h\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Just as above, modified the constructor and destructor from the count.h file to fit\ul\par
{\pntext\f1\'B7\tab}\ulnone Reorder was a bit more challenging with transpose, ultimately had to create two separate local data members to keep track of the swaps occurring.\ul\par

\pard\sl276\slmult1\ulnone\par
5/9/23:\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1 Adding the required logic to mainDriver to perform the string reads from the test file.\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Having issues with creating string objects in mainDriver.\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li2160\sl276\slmult1\ulnone Char objects from earlier are also erroring out\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone I spent a few hours debugging ( even reverted the changes ), still seeing the errors.\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li2160\sl276\slmult1\ulnone Going to try creating a new project in VS2017 and just move the c++ files into the new solution\ul\par
{\pntext\f1\'B7\tab}\ulnone The project was still not able to compile, deleting the files from that project and creating blank ones + copying the raw code from the old files\ul\par
{\pntext\f1\'B7\tab}\ulnone The project now compiles, will try adding the string methods again tomorrow or Thursday. I will be wary of how much I add with each step.\ul\par

\pard\sl276\slmult1\ulnone\par
5/10/23:\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1 Added code for string objects and nothing else to see if project build would succeed\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Appears to work at this point\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1\ulnone Added logic to take each word from file, and add to all 3 lists with each pass\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Appears to still be working\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1\ulnone Added printlist(10) function calls\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone The lists are printing to the console, but the reorder method must not be working whatsoever, because the move to front heuristic has entries at the front with 0 and 1 accesses.\ul\par
{\pntext\f1\'B7\tab}\ulnone After debugging for a while, changing \lquote this->add(it)\rquote  to \lquote list.insert(it)\rquote  within the find method seems to have fixed mtf, will copy for the other headers and adjust as needed.\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1\ulnone Program appears to work as intended, will work on conciseness and readability tomorrow.\ul\par

\pard\sl276\slmult1\ulnone\par
5/11/23:\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1 Added comments to code that detail what each method is doing\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li1440\sl276\slmult1\ulnone Reviewed for opportunities to remove/edit portions for cleaner implementations, started getting errors again so I decided it was better left alone with the deadline fast approaching (I am unable to work on this tomorrow, 5/12)\ul\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1\ulnone Added pausespace() method to mainDriver to improve readability.\ul\par
{\pntext\f1\'B7\tab}\ulnone I noticed the number of compares on the strings are incredibly large, but I don\rquote t see any issues with the code so I will submit as is.\ul\par
}
 